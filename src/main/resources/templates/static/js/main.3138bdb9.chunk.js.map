{"version":3,"sources":["profile2.png","logo.svg","components/Header.js","components/Timesheet.js","components/Account.js","components/TimeData.js","data.js","components/Activity.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","username","this","props","className","src","logo","alt","profile","to","Component","Timesheet","Account","account","dir","defaultValue","firstName","lastName","cardId","roleId","TimeData","date","time","data","_id","Activity","activityComponents","map","key","App","state","axios","get","params","then","response","console","log","setState","catch","error","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3138bdb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile2.22be3d5c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from '../logo.svg';\r\nimport profile from '../profile2.png';\r\nimport '../Style/Grid.css';\r\nimport '../Style/Header.css';\r\n\r\nclass Header extends Component {\r\n render() {\r\n     var username = this.props.username;\r\n     if (username == null) {\r\n         username = \"\";\r\n     }\r\n     return (\r\n         <header className = \"header\">\r\n             <div className = \"row\">\r\n                <img className = \"logo column-1\" src = {logo} alt = \"Logo\" />\r\n                <h2 className = \"column-10\">Welcome, {username}</h2>\r\n                <img className = \"profilePic column-1\" src = {profile} alt = \"profile\" />\r\n            </div>\r\n            <div className = \"navbar row\">\r\n                <button className = \"column-4\" ><Link to=\"/activity\">Activity</Link></button>\r\n                <button className = \"column-4\"><Link to=\"/timesheet\">Timesheet</Link></button>\r\n                <button className = \"column-4\"><Link to=\"/account\">Account</Link></button>\r\n            </div>\r\n         </header>\r\n     )\r\n }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Timesheet extends Component {\r\n render() {\r\n     return (\r\n        <div>\r\n            test\r\n        </div>\r\n     );\r\n }\r\n}\r\n\r\nexport default Timesheet;\r\n","import React, { Component } from 'react';\r\nimport profile from '../profile2.png';\r\nimport '../Style/Grid.css';\r\nimport '../Style/Account.css';\r\n\r\nclass Account extends Component {\r\n    render() {\r\n        const account = this.props.account\r\n        return (\r\n           <form className = \"row\">\r\n               <img className = \"profilepic column-12\" src = {profile} alt = \"profile\"/>\r\n               <input className = \"column-12\" dir=\"auto\" defaultValue = {account.firstName} />\r\n               <input className = \"column-12\" dir=\"auto\" defaultValue = {account.lastName} />\r\n               <input className = \"column-12\" dir=\"auto\" defaultValue = {account.username} />\r\n               <input className = \"column-12\" dir=\"auto\" defaultValue = {account.cardId} />\r\n               <input className = \"column-12\" dir=\"auto\" defaultValue = {account.roleId} />\r\n           </form>\r\n        );\r\n    }\r\n   }\r\n\r\nexport default Account;\r\n","import React from 'react';\r\nimport '../Style/Grid.css';\r\nimport '../Style/Activity.css';\r\n\r\nfunction TimeData (props) {\r\n    return (\r\n        <div className = \"activity row\">\r\n            <div className = \"date column-6\">{props.date}</div>\r\n            <div className = \"time column-6\">{props.time}</div>\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default TimeData;\r\n","const data = [\r\n    {\r\n        _id: '1',\r\n        date: '2019-12-05',\r\n        time: '12:35:41.123'\r\n    },\r\n    {\r\n        _id: '2',\r\n        date: '2019-12-05',\r\n        time: '08:35:41.123'\r\n    },\r\n    {\r\n        _id: '3',\r\n        date: '2019-12-04',\r\n        time: '12:35:41.123'\r\n    },\r\n    {\r\n        _id: '4',\r\n        date: '2019-12-04',\r\n        time: '08:35:41.123'\r\n    }\r\n]\r\n\r\nexport default data","import React, { Component } from 'react';\r\nimport TimeData from './TimeData';\r\nimport data from '../data'\r\nimport '../Style/Activity.css';\r\n\r\nclass Activity extends Component {\r\n render() {\r\n     const activityComponents = data.map(time => <TimeData key = {time._id} date = {time.date} time = {time.time} />)\r\n     return (\r\n        <div className = \"activities\">\r\n             {activityComponents}\r\n        </div>\r\n     )\r\n }\r\n}\r\n\r\nexport default Activity;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Header from './components/Header.js';\nimport Timesheet from './components/Timesheet';\nimport Account from './components/Account';\nimport Activity from './components/Activity';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        account: \"\"\n    }\n}\n\ncomponentDidMount() {\n    axios.get('http://si01dw-wrk014.com.euroscript.local:8080/users/user', { params: {username: \"fran\"}})\n      .then(response => {\n        console.log(response)\n        this.setState({account: response.data[0]})\n       })\n      .catch(error => {\n          console.log(error)\n      })\n}\n  render() {\n    const { account } = this.state;\n    return (\n      <Router>\n        <Header username = {account.username} />\n        <Switch>\n          <Route exact path=\"/\">\n            <div>\n              <p>No data</p>\n            </div>\n          </Route>\n          <Route path=\"/activity\">\n            <Activity />\n          </Route>\n          <Route path=\"/timesheet\">\n            <Timesheet />\n          </Route>\n          <Route path=\"/account\">\n            <Account account = {account}/>\n          </Route>\n        </Switch>\n      </Router> \n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}